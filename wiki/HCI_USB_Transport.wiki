#summary HCI USB Transport using libUSB

= Introduction =
As serial Bluetooth modules are a not commonly used, using a USB Bluetooth Dongle helps developing the upper layers of the stack. For BTstack, we have started to use [http://libusb.wiki.sourceforge.net/Libusb1.0 libUSB-1.0]. It is available for Linux and OS X and provides an asynchronous API that facilitates integration in the BTdaemon single-threaded run-loop (see [Architecture]).

However, it is not ported to Windows yet. For debugging purposes on Windows, a separate thread could use the older libUSB-0.1 and signal the main loop when data is ready to read from USB. According to Michael Murphy, there is recent discussion on the libusb-win32-dev mailing list about porting libusb-1.0 to Windows. Daniel Drake, the maintainer of the code, has pointed out that the POSIX fd polling used heavily in libusb-1.00 but absent in Windows, is not immutable code, and that he is receptive to the use of Windows-native alternatives, if it means the library can be ported.

= Details =

= Caveats =
 * Linux: root access rights are required to have libUSB connect to a Bluetooth modue. Running BTdaemon as root is not optimal, but probably ok for most people toying with BTstack.
 * OS X: The OS sizes the BT module when plugged in. To use it with libUSB, a "Vendor Specific" kernel extension has to be created and installed. The kernel extension basically only consists of a plist (XML) file that specifies the used BT dongle. [http://www.opensource.apple.com/source/IOUSBFamily/IOUSBFamily-343.4.3/Examples/VendorSpecific%20Driver/ VendorSpecific Driver example code]. For unknown reasons, this failed for me. Another, rough but reliable approach is to remove /System/Library/IOBluetoothFamily.kext and reboot. Problem solved.
   
= Default Endpoints =
 * 0x00: Control Transfer: HCI Commands
 * 0x81: Interrupt Transfer: HCI Events
 * 0x02: Bulk Transfer: ACL packet to BT dongle
 * 0x82: Bulk Transfer: ACL packets from BT dongle

= Status =
 * Finding a BT module (either by product & vendor ID or by device class) works on Linux and Mac.
   * The built-in Bluetooth in my MacBook Pro has  class 0xff instead of 0xe0, so I use the VID/PID 
 * Probing the USB device descriptor for the endpoints of the the four HCI packet types works on Linux and Mac
 * With current libusb from GIT (Jan 2011), BTstack boots up properly and basic operations work on Mac (i386)

= TODO =
 * More tests
 * more documentation
 * libusb is supported on win32 - have someone try that out 