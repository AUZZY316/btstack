#summary This page reviews the Bluetooth controller on the Apple's iPhone and iPod Touch and explains how it can be used independently from the OS

= Introduction =

So far, the OS on the iPhone and the iPod Touch only supports the use of Bluetooth headsets. However, this is not a limitation of the used Bluetooth chipset, but of an incomplete Bluetooth stack. According to Apple's presentation in Mar '09, the upcoming OS 3.0 will provide more Bluetooth functionality. At least the standard OBEX protocol for the exchange of business cards, calendar items, notes, and pictures will be supported, even with other mobile phones. But that's about it. OS 3.0 will further support iPhone-to-iPhone connections intended for local gaming and connection to devices "Made for iPhone" over a closed and proprietary protocol. It is highly unlikely that it will support basic Bluetooth protocols like L2CAP or RFCOMM. 

= Hardware Details =

Both generation of the iPhone (2G and 3G versions) use Bluetooth chipsets from Cambridge Silicon Radio (CSR), one of the leading Bluetooth vendors. CSR provides a wealth of documentation in their [http://csrsupport.com technical support area] (free login required). The first generation iPhone contains a BlueCore ?, the second generation (current 3G models) contains a BlueCore ? chipset. (Tell me if you know which one, I'll look it up soon..). The iPod Touch second generation contains a Broadcom chipset, a company not famous for providing developer information.

= HCI UART History =

CSR was one of the first vendors to acknowledge that the original HCI UART transport protocol specified by the Bluetooth Special Interest Group (SIG) contains a fundamental flaw. The problem with the original protocol called H4 - as it was described in chapter H, section 4 of the Bluetooth specification 1.1 - is that a single bit error can lead to a loss of synchronization between the Bluetooth Host (e.g., a PC or an iPhone) and the Bluetooth Controller (the Bluetooth chipset). Even worse, there is no option to re-synchronize the communication. Therefore, the only remedy is to reset the Bluetooth Controller, which also closes all open connections. Because of this CSR added a new transport protocol, the BlueCore Serial protocol (BCSP) to their chipsets. To overcome the issues of link synchronization and bit errors, BCSP makes use of the Serial Link Interface Protocol (SLIP). The Bluetooth SIG later introduced the new "Three-wire protocol", also called H5, presumably based on CSR's BCSP protocol.

= Software Details =

On the iPhone and the iPod Touch, the Bluetooth functionality is provided by BTserver, a background daemon. No further information is available about it. However, to control the Bluetooth chipset, the BTserver makes use of the BlueTool. The BlueTool tool provides a command-line interface for changing the operation mode (on/off/sleep..) and to configure various details of the Bluetooth chipset. The configuration used on the iPhone is rather complex, but fortunately, Apple provides the commented initialization scripts in /etc/bluetool. By just feeding the script for the actual to BlueTool, the Bluetooth chipset is fully initialized. The iPhones are configured for the H5 transport protocol and a baudrate of 2.4 megabit per second. On the iPod Touch, the firmware for the Broadcom chipset is loaded first before it is also configured for 2.4 mbps. From the init script, it is not clear, which type of transport protocol is used.

= iPhone / iPod Touch Support in BTstack =
Initially, BTstack will only support the H4 transport mode. We might later implement the H5 protocol or the CSR BCSP protocol. To use BTstack on the iPhone/iPod Touch, it is sufficient to just comment the lines which set the transport mode to H5 and set the baudrate to 2.4 mbps. On the iPhone this results in H4 mode at 115200 baud. We don't have an iPod Touch, so this has to be figured out.

