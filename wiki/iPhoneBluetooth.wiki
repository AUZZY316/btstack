#summary This page reviews the Bluetooth controller on the Apple's iPhone and iPod touch and explains how it can be used independently from the OS

= Introduction =

The 2.x OS on the iPhone and the iPod touch did only support Bluetooth headsets. However, this is not a limitation of the used Bluetooth chipset, but of an incomplete Bluetooth stack. The current OS 3.0 provides support for headsets (mono/stereo), networking via the PAN/BNEP protocol and support for "Made for iPhone" devices which require a proprietary Bluetooth protocol. Still, not even basic OBEX support is included (available with any low-price mobile phone), and no API is available to connect to arbitrary Bluetooth devices.

= Peer-to-Peer Gaming =
Apple's Game Networking API in 3.0 allows to connect nearby iPhones via Bluetooth and to use normal IP networking (TCP, UDP, Bonjour..). The main goal of this is to simplify the pairing procedure which does not involve PINs. It makes use of the Extended Inquiry procedure of Bluetooth 2.1 and higher. The extended inquiry response (EIR) contains a list of SDP service records of which one is a "vendor-specific" extension. If a device provides such a EIR, the iPhone will connect to the foreign device and query its SDP for more details. More analysis is needed to provide peer-to-peer gaming for non-Apple devices.

= Bluetooth Tethering =
On 3.0, the iPhone is provides Bluetooth PAN/BNEP support. If the devices are paired and Bluetooth is enabled on the iPhone,  a network connection can directly be established from another device, e.g., a laptop. Internet Tethering will activated automatically. The iPhone acts as a normal home router and allows direct TCP/IP connections in both directions. The use of standard TCP/IP communication might be sufficient for most connections between networked devices like netbooks and laptops and the iPhone. However,  connecting to standard Bluetooth devices is not possible by this.

= Hardware Details =
Both generation of the iPhone (2G and 3G versions) use Bluetooth chipsets from Cambridge Silicon Radio (CSR), one of the leading Bluetooth vendors. CSR provides a wealth of documentation in their [http://csrsupport.com technical support area] (free login required). The first generation iPhone contains a !BlueCore 4, the second generation (current 3G models) contains a !BlueCore 6 chipset. The iPod touch second generation contains a Broadcom chipset, a company not famous for providing developer information. 

The Bluetooth modules are connected via an UART integrated in the ARM CPU. It is accessibly as /dev/tty.bluetooth. There are 2 virtual devices: /dev/btwake and /dev/btreset which probably are used to simply wake or reset the Bluetooth module via POSIX API instead of using some obscure internal library.

= Software Details =

On the iPhone and the iPod touch, the Bluetooth functionality is provided by BTserver, a background daemon. No further information is available about it. However, to control the Bluetooth chipset, the BTserver makes use of the !BlueTool. The !BlueTool tool provides a command-line interface for changing the operation mode (on/off/sleep..) and to configure various details of the Bluetooth chipset. The configuration used on the iPhone is rather complex, but fortunately, Apple provides commented initialization scripts in /etc/bluetool. By just feeding the script for the actual Bluetooth chipset to !BlueTool, Bluetooth is fully initialized. The iPhones are configured for the [HCI_UART_Transport H5 transport protocol] and a baudrate of 2.4 megabit per second. On the iPod touch, the firmware for the Broadcom chipset is loaded first before it is also configured for 2.4 mbps. In contrast to the iPhone, the basic H4 transport protocol is used and the Bluetooth MAC address has to be set with the !BlueTool.

= iPhone / iPod touch Support in BTstack =
So far, BTstack only support the [HCI_UART_Transport H4 transport mode]. Support for the [HCI_UART_Transport H5] or the [HCI_UART_Transport CSR BCSP protocol] might be implemented later. In order to use the CSR module in H4 mode, the script provided by Apple is parsed and modified on-the-fly before it is fed into !BlueTool. Baud rates from 57600-921600 can be used. Higher baud rates are not supported by the standard IOCTL call.